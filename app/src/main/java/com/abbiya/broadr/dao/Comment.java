package com.abbiya.broadr.dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import com.abbiya.broadr.utility.Constants;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

import java.io.Serializable;
import java.util.Date;

import de.greenrobot.dao.DaoException;

/**
 * Entity mapped to table COMMENT.
 */
public class Comment implements Serializable {

    private Long id;

    @SerializedName("uuid")
    @Expose
    private String uuid;

    @SerializedName("c")
    @Expose
    private String content;

    @SerializedName("ha")
    @Expose
    private java.util.Date happenedAt;

    @SerializedName("g")
    @Expose
    private String geoHash;

    @SerializedName("a")
    @Expose
    private String address;

    @SerializedName("s")
    @Expose
    private Integer status;

    private java.util.Date updatedAt;

    private long messageId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient CommentDao myDao;

    private Message message;
    private Long message__resolvedKey;


    public Comment() {
    }

    public Comment(Long id) {
        this.id = id;
    }

    public Comment(Long id, String content, long messageId) {
        this.id = id;
        this.content = content;
        this.happenedAt = new Date();
        this.status = Constants.SENDING;
        this.messageId = messageId;
    }

    public Comment(String content, long messageId, String uuid) {
        this.content = content;
        this.happenedAt = new Date();
        this.status = Constants.SENDING;
        this.messageId = messageId;
        this.uuid = uuid;
    }

    public Comment(Long id, String uuid, String content, java.util.Date happenedAt, Integer status, java.util.Date updatedAt, long messageId) {
        this.id = id;
        this.uuid = uuid;
        this.content = content;
        this.happenedAt = happenedAt;
        this.status = status;
        this.updatedAt = updatedAt;
        this.messageId = messageId;
    }

    public Comment(Long id, String uuid, String content, java.util.Date happenedAt, String geoHash, String address, Integer status, java.util.Date updatedAt, long messageId) {
        this.id = id;
        this.uuid = uuid;
        this.content = content;
        this.happenedAt = happenedAt;
        this.geoHash = geoHash;
        this.address = address;
        this.status = status;
        this.updatedAt = updatedAt;
        this.messageId = messageId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public java.util.Date getHappenedAt() {
        return happenedAt;
    }

    public void setHappenedAt(java.util.Date happenedAt) {
        this.happenedAt = happenedAt;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public long getMessageId() {
        return messageId;
    }

    public void setMessageId(long messageId) {
        this.messageId = messageId;
    }

    public String getGeoHash() {
        return geoHash;
    }

    public void setGeoHash(String geoHash) {
        this.geoHash = geoHash;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Message getMessage() {
        long __key = this.messageId;
        if (message__resolvedKey == null || !message__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            Message messageNew = targetDao.load(__key);
            synchronized (this) {
                message = messageNew;
                message__resolvedKey = __key;
            }
        }
        return message;
    }

    public void setMessage(Message message) {
        if (message == null) {
            throw new DaoException("To-one property 'messageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.message = message;
            messageId = message.getId();
            message__resolvedKey = messageId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}