package broadr;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import broadr.Comment;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table COMMENT.
 */
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";
    private DaoSession daoSession;

    ;
    private Query<Comment> message_CommentsQuery;
    private String selectDeep;

    public CommentDao(DaoConfig config) {
        super(config);
    }

    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'COMMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UUID' TEXT UNIQUE ," + // 1: uuid
                "'CONTENT' TEXT," + // 2: content
                "'HAPPENED_AT' INTEGER," + // 3: happenedAt
                "'GEO_HASH' TEXT," + // 4: geoHash
                "'ADDRESS' TEXT," + // 5: address
                "'STATUS' INTEGER," + // 6: status
                "'UPDATED_AT' INTEGER," + // 7: updatedAt
                "'MESSAGE_ID' INTEGER NOT NULL );"); // 8: messageId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMMENT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }

        java.util.Date happenedAt = entity.getHappenedAt();
        if (happenedAt != null) {
            stmt.bindLong(4, happenedAt.getTime());
        }

        String geoHash = entity.getGeoHash();
        if (geoHash != null) {
            stmt.bindString(5, geoHash);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }

        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(8, updatedAt.getTime());
        }
        stmt.bindLong(9, entity.getMessageId());
    }

    @Override
    protected void attachEntity(Comment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // happenedAt
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // geoHash
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
                cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updatedAt
                cursor.getLong(offset + 8) // messageId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHappenedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setGeoHash(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdatedAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setMessageId(cursor.getLong(offset + 8));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Comment entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "comments" to-many relationship of Message.
     */
    public List<Comment> _queryMessage_Comments(long messageId) {
        synchronized (this) {
            if (message_CommentsQuery == null) {
                QueryBuilder<Comment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MessageId.eq(null));
                message_CommentsQuery = queryBuilder.build();
            }
        }
        Query<Comment> query = message_CommentsQuery.forCurrentThread();
        query.setParameter(0, messageId);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMessageDao().getAllColumns());
            builder.append(" FROM COMMENT T");
            builder.append(" LEFT JOIN MESSAGE T0 ON T.'MESSAGE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected Comment loadCurrentDeep(Cursor cursor, boolean lock) {
        Comment entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Message message = loadCurrentOther(daoSession.getMessageDao(), cursor, offset);
        if (message != null) {
            entity.setMessage(message);
        }

        return entity;
    }

    public Comment loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<Comment> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Comment> list = new ArrayList<Comment>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<Comment> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<Comment> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property HappenedAt = new Property(3, java.util.Date.class, "happenedAt", false, "HAPPENED_AT");
        public final static Property GeoHash = new Property(4, String.class, "geoHash", false, "GEO_HASH");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property UpdatedAt = new Property(7, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property MessageId = new Property(8, long.class, "messageId", false, "MESSAGE_ID");
    }

}
