package broadr;

import java.util.List;

import broadr.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table MESSAGE.
 */
public class Message {

    private Long id;
    private String uuid;
    private String content;
    private java.util.Date happenedAt;
    private String geoHash;
    private String address;
    private Integer type;
    private Integer status;
    private java.util.Date updatedAt;
    private long boardId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient MessageDao myDao;

    private Board board;
    private Long board__resolvedKey;

    private List<Comment> comments;

    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, String uuid, String content, java.util.Date happenedAt, String geoHash, String address, Integer type, Integer status, java.util.Date updatedAt, long boardId) {
        this.id = id;
        this.uuid = uuid;
        this.content = content;
        this.happenedAt = happenedAt;
        this.geoHash = geoHash;
        this.address = address;
        this.type = type;
        this.status = status;
        this.updatedAt = updatedAt;
        this.boardId = boardId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public java.util.Date getHappenedAt() {
        return happenedAt;
    }

    public void setHappenedAt(java.util.Date happenedAt) {
        this.happenedAt = happenedAt;
    }

    public String getGeoHash() {
        return geoHash;
    }

    public void setGeoHash(String geoHash) {
        this.geoHash = geoHash;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public long getBoardId() {
        return boardId;
    }

    public void setBoardId(long boardId) {
        this.boardId = boardId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Board getBoard() {
        long __key = this.boardId;
        if (board__resolvedKey == null || !board__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BoardDao targetDao = daoSession.getBoardDao();
            Board boardNew = targetDao.load(__key);
            synchronized (this) {
                board = boardNew;
                board__resolvedKey = __key;
            }
        }
        return board;
    }

    public void setBoard(Board board) {
        if (board == null) {
            throw new DaoException("To-one property 'boardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.board = board;
            boardId = board.getId();
            board__resolvedKey = boardId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Comment> getComments() {
        if (comments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            List<Comment> commentsNew = targetDao._queryMessage_Comments(id);
            synchronized (this) {
                if (comments == null) {
                    comments = commentsNew;
                }
            }
        }
        return comments;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetComments() {
        comments = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
